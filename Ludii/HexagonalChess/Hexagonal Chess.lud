// Hexagonal Chess
// Copyright 2020, Jay M. Coskey
// Supported variants:: Glinski, Brusky, De Vasa, Empty Palace, McCooey, Mini Hexchess, Shafran, Starchess
// BUG: In Shafran Chess, En passant not working after 3-space initial Pawn move. (See "BUG", below.)
// TODO: Wellisch Chess

//----------------------------------------
// Defines from options
//----------------------------------------

<Board:Defines>
<Castling:Defines>
<Movement-Pawns:Defines>

//----------------------------------------
// General defines
//----------------------------------------

// Source: Chess.lud - CaptureToPieceAndResetCounter
(define "CaptureToPieceAndResetCounter"
    (effect
        (if (is Enemy (who at:(to)))
            (remove (to)
                (then (set Counter))
            )
        )
    )
)

(define "IsToEmpty"
    (is In (to) (sites Empty))
)

(define "IsToEmptyOrEnemy"
    (or
        "IsToEmpty"
        (is Enemy (who at:(to)))
    )
)

// Source: Chess.lud - NextCanNotMove
(define "NextCannotMove"
    (not (can Move (do
                (forEach Piece (next))
                ifAfterwards:(not ("IsInCheck" "King" Next))
    )))
)

// Usage: ("P12" <player_1_option> <player_2_option>)
(define "P12"
    (if (is Mover P1) #1 #2)
)

// Usage: ("PromoteTo" <piece_types>)
(define "PromoteTo"
    (promotion (last To) #1 Mover)
)

// Usage: ("SlideMove" <direction> <then>)
(define "SlideMove"
    (slide #1
        (to if:(is Enemy (who at:(to)))
            "CaptureToPieceAndResetCounter"
        )
        #2
    )
)

//----------------------------------------
// Kings: Non-castling defines
//----------------------------------------

// Usage: ("KingStep" <direction> <then>)
(define "KingStep"
    (step #1
        (to if:"IsToEmptyOrEnemy"
            "CaptureToPieceAndResetCounter"
        )
        #2
    )
)

//----------------------------------------
// Kings: Castling defines
//----------------------------------------

(define "Castle_PreCheck"
    (and
        {
        "King_IsAtStartCell"
        ("History_HasNeverMoved" "King")
        (not ("IsInCheck" "King" Mover))
        }
    )
)

// Usage: ("Castle_Base" <piece_key> <slide_dir> <slide_spaces> <condition> <then>)
// Source: Chess.lud - DoCastle
(define "Castle_Base"
    (slide
        (from (mapEntry #1 (mover)))
        #2
        (between
            (exact #3)
            if:#4
        )
        #5
    )
)

// Usage: ("Castle_KingRook" <king_dir> <king_spaces> <rook_side> <rook_dir> <rook_spaces>)
(define "Castle_KingRook"
    ("Castle_Base"
        "King"
        #1
        #2
        "King_IsToEmptyAndNotInCheck"
        (then (and ("History_SaveMovement") ("Castle_Base" #3 #4 #5 true)))
    )
)

// Usage: ("Castle" <king_dir> <king_spaces> <rook_side> <rook_dir> <rook_spaces>)
//        Example: ("Castle" "NE" 3 "RookRight" "SW" 2)
(define "Castle"
    (if (and
            ("History_HasNeverMoved" #3)
            (can Move ("Castle_Base" #3 #4 #5 "IsToEmpty"))
        )
        ("Castle_KingRook" #1 #2 #3 #4 #5)
    )
)

//----------------------------------------
// Kings: History (for castling)
//----------------------------------------

// Source: Chess.lud - PieceHasNeverMoved
// Usage: ("History_HasNeverMoved" <piece_name_key>)
(define "History_HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1)
)

// Source: Chess.lud - PieceHasMoved
(define "History_SaveMovement"
    (set State (last To) 0)
)

// Source: Chess.lud - RememberPieceHasMoved
(define "History_SaveMovementChange"
    (then
        (if (= (state at:(last To)) 1)
            "History_SaveMovement"
        )
    )
)

//--------------------
// Kings: Tests
//--------------------

// Source: Chess.lud - KingInTheInitialPlace
(define "King_IsAtStartCell"
    (= (what at:(mapEntry "King" (mover))) (id "King" Mover))
)

// Source: Chess.lud - KingNotCheckedAndToEmpty
(define "King_IsToEmptyAndNotInCheck"
    (and
        "IsToEmpty"
        (not ("IsInCheck" "King" Mover at:(to)))
    )
)

//--------------------
// Pawns: Single step (non-capturing)
// Note: Do not reset the Counter---that's done elsewhere.
//--------------------

// Usage: ("PawnStep_ToEmpty" <direction>)
(define "PawnStep_ToEmpty"
    (step #1
        (to if:"IsToEmpty")
    )
)

// Source: Chess.lud - CaptureForwardDiagonal
(define "PawnStep_ForwardDiag"
    (step (directions {FL FR})
        (to if:(is Enemy (who at:(to)))
            (effect (remove (to)))
        )
    )
)

// Usage: ("PawnFork_ToEmpty_Base" <left_P1> <right_P1> <left_P2> <right_P2>)
(define "PawnFork_ToEmpty_Base"
    ("P12"
        (or ("PawnStep_ToEmpty" #1) ("PawnStep_ToEmpty" #2))
        (or ("PawnStep_ToEmpty" #3) ("PawnStep_ToEmpty" #4))
    )
)

//--------------------
// Pawns: Double step (non-capturing)
// Note: Do not reset the Counter---that's done elsewhere.
//--------------------

// Source: Derived from Chess.lud - DoubleStep
// Usage: ("PawnStep_Double_Base" <fwd_dir> <back_dir>)
(define "PawnStep_Double_Base"
    (hop
        #1
        (between if:(is In (between) (sites Empty)))
        (to if:"IsToEmpty")
        (then (and
            {
            (set Pending (ahead (last To) #2))
            (set Var (last To))
            }
        ))
    )
)

(define "PawnStep_Double"
    ("PawnStep_Double_Base" Forward Backward)
)

// Usage: ("PawnStep_Double_Base" <LF1> <LB1> <RF1> <RB1> <LF2> <LB2> <RF2> <RB2>)
// Note: Brusky chess also has multiple possible directions for Pawn double advancement
//       (a forking double-step), but its blocking rule requires a different treatment.
(define "PawnFork_Double_Base"
    ("P12"
        (or ("PawnStep_Double_Base" #1 #2) ("PawnStep_Double_Base" #3 #4))
        (or ("PawnStep_Double_Base" #5 #6) ("PawnStep_Double_Base" #7 #8))
    )
)

//--------------------
// Pawns: Simple capture
// Note: Do not reset the Counter---that's done elsewhere.
//--------------------

// Usage: ("PawnStep_To" <direction>)
(define "PawnStep_To"
    (step #1
        (to if:(is Enemy (who at:(to)))
            (effect (remove (to)))
        )
    )
)

// Usage: ("PawnFork_Base" <left_dir_P1> <right_dir_P1> <left_dir_P2> <right_dir_P2>)
(define "PawnFork_Base"
    ("P12"
        (or ("PawnStep_To" #1) ("PawnStep_To" #2))
        (or ("PawnStep_To" #3) ("PawnStep_To" #4))
    )
)

//--------------------
// Pawns: En passant
//   - Save skipped-over spaces in Pending
//   - Save location of last-moved Pawn in Var.
// Note: Do not reset the Counter---that's done elsewhere.
//--------------------

(define "IsEnPassantCapture"
    (and
        (is Pending)
        (= (to) (value Pending))
    )
)

// Usage: ("EnPassant_Base" <direction>)
(define "EnPassant_Base"
    (step
        (directions #1)
        (to if:"IsEnPassantCapture")
        (then (remove (var)))
    )
)

(define "EnPassant_Diag"
    ("EnPassant_Base" {FL FR})
)

// Usage: ("EnPassantFork_Base" <left_P1> <right_P1> <left_P2> <right_P2>)
(define "EnPassantFork_Base"
    ("P12"
        (or ("EnPassant_Base" #1) ("EnPassant_Base" #2))
        (or ("EnPassant_Base" #3) ("EnPassant_Base" #4))
    )
)

//------------------------------------------------------------------------------

(game "Chess"
    (players <Players:Players>)
    (equipment
        {
        (board
            <Board:Layout>
            <Board-Details:Details>
        )
        <Board:Region-Colouring>

        <Movement-Kings:Movement>
        <Movement-Queens:Movement>
        <Movement-Rooks:Movement>
        <Movement-Bishops:Movement>
        <Movement-Knights:Movement>

        (piece "Pawn" Each
            (or <Movement-Pawns:Movement>
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion"))
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )

        <Castling:Equipment>
        <Placement-Player:Equipment>
        <Movement-Pawns:Equipment>
        <Promotion:Locations>
        }
    )

    (rules
        (start
            {
            <Placement-Pawns:Pawns>
            <Placement-NonPawns:NonPawns>
            <Placement-Player:Start>
            }
        )
        phases:{
        <Placement-Player:Placement-Phase-Play>
        (phase "Movement"
            (play
                (if ("SameTurn")
                    <Promotion:Promotion>
                    (do (forEach Piece)
                        ifAfterwards:(not ("IsInCheck" "King" Mover))
                    )
                )
            )
            (end
                {
                (if (and
                        ("IsInCheck" "King" Next)
                        ("NextCannotMove")
                    )
                    (result Mover Win)
                )
                (if (or
                        (no Moves Mover)
                        (= (counter) 100)
                    )
                    (result Mover Draw)
                )
                }
            )
        )
        }
    )
)

//------------------------------------------------------------------------------

(option "Players" <Players> args:{<Players>}
    {
    (item "Players-2-N-S"
        < {(player N) (player S)} >
        "Two players, with Forward directions N and S"
    )*
    (item "Players-2-NNE-SSW"
        < {(player NNE) (player SSW)} >
        "Two players, with Forward directions NNE and SSW"
    )
    }
)

// When each hex cell is oriented vertically, Phases 0, 1, and 2 implement 3-colour uniform tiling.
// But in the board orientation used for Gli≈Ñski's Chess, it does not.
// If a predicate were used, regions could be given by something like:
//     (regions "RegionDark" (forEach (sites All) (= 0 (% (row + column) 3))))
// Here we define the colouring regions of the board by specifying individual cell coords.
(option "Board" <Board> args:{<Layout> <Region-Colouring> <Defines>}
    {
    (item "Hexagon-6N"
        < (hexagon 6 N) >
        <
            (regions "Region-Dark"
                (sites {"A1" "A4" "B3" "B6" "C2" "C5" "C8"
                "D1" "D4" "D7" "E3" "E6" "E9" "F2" "F5" "F8" "F11" "G4" "G7" "G10"
                "H3" "H6" "H9" "I5" "I8" "I11" "J7" "J10" "K6" "K9"
                })
            )
            (regions "Region-Light"
                (sites {"A3" "A6" "B2" "B5" "C1" "C4" "C7"
                "D3" "D6" "D9" "E2" "E5" "E8" "F1" "F4" "F7" "F10" "G3" "G6" "G9"
                "H5" "H8" "H11" "I4" "I7" "I10" "J6" "J9" "K8" "K11"
                })
            )
            (regions "Region-Medium"
                (sites {"A2" "A5" "B1" "B4" "B7" "C3" "C6"
                "D2" "D5" "D8" "E1" "E4" "E7" "E10" "F3" "F6" "F9" "G2" "G5" "G8" "G11"
                "H4" "H7" "H10" "I6" "I9" "J5" "J8" "J11" "K7" "K10"
                })
            )
        >
        <>
        "Hexagon-shaped board of size 6"
    )*
    (item "Hexagon-5N"
        < (hexagon 5 N) >
        <
            (regions "Region-Dark"
                (sites {"A1" "A4" "B3" "B6" "C2" "C5"
                "D1" "D4" "D7" "E3" "E6" "E9" "F2" "F5" "F8" "G4" "G7"
                "H6" "H9" "I5" "I8"
                })
            )
            (regions "Region-Light"
                (sites {"A2" "A5" "B1" "B4" "C3" "C6"
                "D2" "D5" "D8" "E1" "E4" "E7" "F3" "F6" "F9" "G5" "G8"
                "H4" "H7" "I6" "I9"
                })
            )
            (regions "Region-Medium"
                (sites {"A3" "B2" "B5" "C1" "C4" "C7"
                "D3" "D6" "E2" "E5" "E8" "F4" "F7" "G3" "G6" "G9"
                "H5" "H8" "I7"
                })
            )
        >
        <>
        "Hexagon-shaped Board of size 5"
    )
    (item "Hexagon-4N"
        < (hexagon 4 N) >
        <
            (regions "Region-Dark"
                (sites {"A2" "A5" "B1" "B4" "C3" "C6"
                "D2" "D5" "E1" "E4" "E7" "F3" "F6" "G2" "G5"
                })
            )
            (regions "Region-Light"
                (sites {"A3" "A6" "B2" "B5" "C1" "C4"
                "D3" "D6" "E2" "E5" "F1" "F4" "F7" "G3" "G6"
                })
            )
            (regions "Region-Medium"
                (sites {"A1" "A4" "B3" "C2" "C5"
                "D1" "D4" "D7" "E3" "E6" "F2" "F5" "G4" "G7"
                })
            )
        >
        <>
        "Hexagon-shaped Board of size 4"
    )
    (item "Hexagon-9"
        < (hexagon 9) >
        <>
        <>
        "Hexagon-shaped board of size 9"
    )
    (item "Rhombus-9"
        < (rhombus 9) >
        <
            (regions "Region-Dark"
                (sites {"A2" "A5" "A8" "B3" "B6" "B9" "C1" "C4" "C7"
                "D2" "D5" "D8" "E3" "E6" "E9" "F1" "F4" "F7"
                "G2" "G5" "G8" "H3" "H6" "H9" "I1" "I4" "I7"
                }))
            (regions "Region-Light"
                (sites {"A3" "A6" "A9" "B1" "B4" "B7" "C2" "C5" "C8"
                "D3" "D6" "D9" "E1" "E4" "E7" "F2" "F5" "F8"
                "G3" "G6" "G9" "H1" "H4" "H7" "I2" "I5" "I8"
                }))
            (regions "Region-Medium"
                (sites {"A1" "A4" "A7" "B2" "B5" "B8" "C3" "C6" "C9"
                "D1" "D4" "D7" "E2" "E5" "E8" "F3" "F6" "F9"
                "G1" "G4" "G7" "H2" "H5" "H8" "I3" "I6" "I9"
                }))
        >
        <
            (define "Castle_KingSide_P1"  ("Castle" SE 2 "RookRight" NW 2))
            (define "Castle_QueenSide_P1" ("Castle" NW 3 "RookLeft"  SE 3))

            (define "Castle_KingSide_P2"  ("Castle" SE 2 "RookRight" NW 2))
            (define "Castle_QueenSide_P2" ("Castle" NW 3 "RookLeft"  SE 3))

            (define "Castle_KingSide"  ("P12" "Castle_KingSide_P1"  "Castle_KingSide_P2"))
            (define "Castle_QueenSide" ("P12" "Castle_QueenSide_P1" "Castle_QueenSide_P2"))
        >
        "Rhombus-shaped board of size 9"
    )
    }
)

(option "Board Details" <Board-Details> args:{<Details>}
    {
    (item "None"
        <>
        "No spaces removed"
    )*
    (item "Brusky"
        <
            (remove Cell {
                208 209 210 211 212 213 214 215 216
                198 199 200 201 202 203 204 205 206 207
                187 188 189 190 191 192 193 194 195 196 197
                175 176 177 178 179 180 181 182 183 184 185 186
                162 163 164 165 166 167 168 169 170 171 172 173 174
                148 149 150 151 152 153 154 155 156 157 158 159 160 161
                133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
                117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132
                100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116
                84 85 86    96 97 98 99
                69 70       81 82 83
                55          67 68
                            54
            })
        >
        "Brusky: Trim excess spaces"
    )
    (item "De Vasa with only 8 rows"
        <
            (remove Cell {
                44 58 59 69 70 77 76 79 80  // "A1" .. "I9"
            })
        >
        "Remove ninth row"
    )
    (item "Shafran"
        <
            (remove Cell {
                0 4 5 13 14        // "F1" "G2" "H3" "I4" "J5"
                25 36 47 58 69 80  // "K6" "K7" "K8" "K9" "K10" "K11"
                79 87 86 90 89     // "J11" "I11" "H11" "G11" "F11"
                24 35 46 57 68     // "J6" "J7" "J8" "J9" "J10"
            })
        >
        "Shafran: Trim the right-hand side of the board"
    )
    (item "Starchess"
        <
            (remove Cell {
                10 19 3 11   // "A1" "A2" "B1" "B2"
                0 1 6 2      // "D1" "E1" "E2" "F2"
                9 17 18 27   // "H4" "H5" "I5" "I6"
                44 53 45 54  // "H8" "H9" "I8" "I9"
                56 57 60 58  // "D8" "E8" "E9" "F9"
                37 46 38 47  // "A4" "A5" "B5" "B6"
            })
        >
        "Starchess: Trim the six corners"
    )
    }
)

(option "Graphics" <Graphics> args:{<Colouring>}
    {
    (item "Region Colours"
        <
            // Colours darker than those on Wikipedia (#d18b47, #ffce9e, #e8ab6f)
            (regionColour "Region-Dark"   (colour "#b5651d"))
            (regionColour "Region-Light"  (colour "#fff8dc"))
            (regionColour "Region-Medium" (colour "#daae7c"))
        >
        "In the graphics section, colour by Region"
    )*
    (item "Board Colours"
        <
            // Colours darker than those on Wikipedia (#d18b47, #ffce9e, #e8ab6f)
            (boardColour Phase0 (colour "#b5651d"))
            (boardColour Phase1 (colour "#fff8dc"))
            (boardColour Phase2 (colour "#daae7c"))
        >
        "In the graphics section, colour by boardGraphicsType"
    )
    }
)

(option "Castling" <Castling> args:{<Defines> <Equipment>}
    {
    (item "None"
        <>
        <>
        "This chess variant does not include castling"
    )*
    (item "Brusky"
        <
            (define "Castle_KingSide"  ("Castle" E 2 "RookRight" W 2))
            (define "Castle_QueenSide" ("Castle" W 3 "RookLeft"  E 3))
        >
        <
            (map "King"      {(pair 1 "N6") (pair 2 "J9")})
            (map "RookLeft"  {(pair 1 "I1") (pair 2 "E4")})
            (map "RookRight" {(pair 1 "Q9") (pair 2 "M12")})
        >
        "Brusky chess castling setup"
    )
    (item "De Vasa"
        <>
        <
            (map "King"      {(pair 1 "F1") (pair 2 "F9")})
            (map "RookLeft"  {(pair 1 "A1") (pair 2 "A9")})
            (map "RookRight" {(pair 1 "I1") (pair 2 "I9")})
        >
        "De Vasa chess castling setup"
    )
    (item "De Vasa with only 8 rows"
        <>
        <
            (map "King"      {(pair 1 "F1") (pair 2 "F8")})
            (map "RookLeft"  {(pair 1 "A1") (pair 2 "A8")})
            (map "RookRight" {(pair 1 "I1") (pair 2 "I8")})
        >
        "De Vasa chess castling setup"
    )
    (item "Empty Palace"
        <
            (define "Castle_BishopSide_P1" ("Castle" NE 2 "RookRight" SW 2))
            (define "Castle_QueenSide_P1"  ("Castle" NW 2 "RookLeft"  SE 2))

            (define "Castle_BishopSide_P2" ("Castle" SW 2 "RookLeft"  NE 2))
            (define "Castle_QueenSide_P2"  ("Castle" SE 2 "RookRight" NW 2))

            (define "Castle_BishopSide" ("P12" "Castle_BishopSide_P1" "Castle_BishopSide_P2"))
            (define "Castle_QueenSide"  ("P12" "Castle_QueenSide_P1"  "Castle_QueenSide_P2"))
        >
        <
            (map "King"      {(pair 1 "F1") (pair 2 "F11")})
            (map "RookLeft"  {(pair 1 "C1") (pair 2 "C8")})
            (map "RookRight" {(pair 1 "I4") (pair 2 "I11")})
        >
        "Empty Palace chess castling setup"
    )
    (item "Shafran"
        <
            (define "Castle_BishopSide_Long_P1"  ("Castle" NE 3 "RookRight" SW 2))
            (define "Castle_BishopSide_Short_P1" ("Castle" NE 2 "RookRight" SW 3))
            (define "Castle_QueenSide_Long_P1"   ("Castle" NW 3 "RookLeft"  SE 2))
            (define "Castle_QueenSide_Short_P1"  ("Castle" NW 2 "RookLeft"  SE 3))

            (define "Castle_BishopSide_Long_P2"  ("Castle" SW 3 "RookLeft"  NE 2))
            (define "Castle_BishopSide_Short_P2" ("Castle" SW 2 "RookLeft"  NE 3))
            (define "Castle_QueenSide_Long_P2"   ("Castle" SE 3 "RookRight" NW 2))
            (define "Castle_QueenSide_Short_P2"  ("Castle" SE 2 "RookRight" NW 3))

            (define "Castle_BishopSide_Long"  ("P12" "Castle_BishopSide_Long_P1"  "Castle_BishopSide_Long_P2"))
            (define "Castle_BishopSide_Short" ("P12" "Castle_BishopSide_Short_P1" "Castle_BishopSide_Short_P2"))
            (define "Castle_QueenSide_Long"   ("P12" "Castle_QueenSide_Long_P1"   "Castle_QueenSide_Long_P2"))
            (define "Castle_QueenSide_Short"  ("P12" "Castle_QueenSide_Short_P1"  "Castle_QueenSide_Short_P2"))
        >
        <
            (map "King" {(pair 1 "E1") (pair 2 "E10")})
            (map "RookLeft" {(pair 1 "A1") (pair 2 "A6")})
            (map "RookRight" {(pair 1 "I5") (pair 2 "I10")})
        >
        "Shafran chess castling setup"
    )
    }
)

(option "Placement by Players" <Placement-Player> args:{<Equipment> <Start> <Placement-Phase-Play>}
    {
    (item "None"
        <>
        <>
        <>
        "This chess variant does not include a placement phase"
    )*
    (item "Starchess"
        <
            (hand Each size:5)
            (regions "Home" P1 (sites {"C1" "D2" "E3" "F3" "G3"}))
            (regions "Home" P2 (sites {"C7" "D7" "E7" "F8" "G9"}))
        >
        <
            (place "King" "Hand" count:1)
            (place "Queen" "Hand" count:1)
            (place "Rook" "Hand" count:1)
            (place "Bishop" "Hand" count:1)
            (place "Knight" "Hand" count:1)
        >
        <
            (phase "Placement"
                (play
                    (fromTo
                        (from (sites Occupied by:Mover container:(mover)))
                        (to (intersection (sites Mover "Home") (sites Empty)))
                    )
                )
                (nextPhase ("HandEmpty" P2) "Movement")
            )
        >
        "Initial placement of pieces before movement of pieces begins"
    )
    }
)

(option "Promotion" <Promotion> args:{<Locations> <Promotion>}
    {
    (item "Glinski"
        <
            (regions "Promotion" P1 (union (sites Side NW) (sites Side NE)))
            (regions "Promotion" P2 (union (sites Side SW) (sites Side SE)))
        >
        <
            ("PromoteTo" {"Queen" "Rook" "Bishop" "Knight"})
        >
        "Glinski chess Pawn promotion details"
    )*
    (item "Brusky"
        <
            (regions "Promotion" P1 (sites Top))
            (regions "Promotion" P2 (sites Bottom))
        >
        <
            ("PromoteTo" {"Queen" "Rook" "Bishop" "Knight"})
        >
        "Brusky chess Pawn promotion details"
    )
    (item "De Vasa"
        <
            (regions "Promotion" P1 (sites Side NE))
            (regions "Promotion" P2 (sites Side SW))
        >
        <
            ("PromoteTo" {"Queen" "Rook" "Bishop" "Knight"})
        >
        "De Vasa chess Pawn promotion details"
    )
    (item "Mini Hexchess"
        <
            (regions "Promotion" P1 (union (sites Side NW) (sites Side NE)))
            (regions "Promotion" P2 (union (sites Side SW) (sites Side SE)))
        >
        <
            ("PromoteTo" {"Rook" "Bishop" "Knight"})
        >
        "Mini Hexchess Pawn promotion details"
    )
    (item "Starchess"
        <
            (regions "Promotion" P1 (sites {"C7" "D7" "E7" "F8" "G9"}))
            (regions "Promotion" P2 (sites {"C1" "D2" "E3" "F3" "G3"}))
        >
        <
            ("PromoteTo" {"Queen" "Rook" "Bishop" "Knight"})
        >
        "Starchess Pawn promotion details"
    )
    }
)

(option "Placement of Pawns" <Placement-Pawns> args:{<Pawns>}
    {
    (item "Glinski"
        <
            (place "Pawn1" {"B1" "C2" "D3" "E4" "F5" "G5" "H5" "I5" "J5"})
            (place "Pawn2" {"B7" "C7" "D7" "E7" "F7" "G8" "H9" "I10" "J11"})
        >
        "Glinski chess Pawns starting position (Gli≈Ñski, 1936)"
    )*
    (item "Glinski with 3 Pawns shifted one space"
        <
            (place "Pawn1" {"B1" "C2" "D3" "E3" "F4" "G4" "H5" "I5" "J5"})
            (place "Pawn2" {"B7" "C7" "D7" "E8" "F8" "G9" "H9" "I10" "J11"})
        >
        "Glinski, with the center 3 Pawns shifted one space outward"
    )
    (item "Glinski with 5 Pawns shifted one space"
        <
            (place "Pawn1" {"B1" "C2" "D2" "E3" "F4" "G4" "H4" "I5" "J5"})
            (place "Pawn2" {"B7" "C7" "D8" "E8" "F8" "G9" "H10" "I10" "J11"})
        >
        "Glinski, with the center 5 Pawns shifted one space outward"
    )
    (item "Brusky"
        <
            (place "Pawn1" {"H1" "I2" "J3" "K4" "L5" "M6" "N7" "O8" "P9" "Q10"})
            (place "Pawn2" {"E3" "F4" "G5" "H6" "I7" "J8" "K9" "L10" "M11" "N12"})
        >
        "Brusky chess Pawns placement"
    )
    (item "De Vasa"
        <
            (place "Pawn1" {"A3" "B3" "C3" "D3" "E3" "F3" "G3" "H3" "I3"})
            (place "Pawn2" {"A7" "B7" "C7" "D7" "E7" "F7" "G7" "H7" "I7"})
        >
        "De Vasa chess places Pawns on rows 3 and 7"
    )
    (item "De Vasa with only 8 rows"
        <
            (place "Pawn1" {"A2" "B2" "C2" "D2" "E2" "F2" "G2" "H2" "I2"})
            (place "Pawn2" {"A7" "B7" "C7" "D7" "E7" "F7" "G7" "H7" "I7"})
        >
        "De Vasa chess places Pawns on rows 2 and 7"
    )
    (item "McCooey"
        <
            (place "Pawn1" {"C1" "D2" "E3" "F4" "G4" "H4" "I4"})
            (place "Pawn2" {"C8" "D8" "E8" "F8" "G9" "H10" "I11"})
        >
        "McCooey chess Pawn placement"
    )
    (item "Mini Hexchess"
        <
            (place "Pawn1" {"B1" "C2" "D3" "E3" "F3"})
            (place "Pawn2" {"B5" "C5" "D5" "E6" "F7"})
        >
        "Mini Hexchess Pawn placement"
    )
    (item "Shafran"
        <
            (place "Pawn1" {"A2" "B2" "C2" "D2" "E2" "F3" "G4" "H5" "I6"})
            (place "Pawn2" {"A5" "B6" "C7" "D8" "E9" "F9" "G9" "H9" "I9"})
        >
        "Shafran chess Pawn placement"
    )
    (item "Starchess"
        <
            (place "Pawn1" {"C2" "D3" "E4" "F4" "G4"})
            (place "Pawn2" {"C6" "D6" "E6" "F7" "G8"})
        >
        "Starchess Pawn placement"
    )
    }
)

(option "Placement of Non-Pawns" <Placement-NonPawns> args:{<NonPawns>}
    {
    (item "Glinski"
        <
            (place "King1" coord:"G2")
            (place "Queen1" coord:"E1")
            (place "Rook1" {"C1" "I4"})
            (place "Bishop1" {"F1" "F2" "F3"})
            (place "Knight1" {"D1" "H3"})

            (place "King2" coord:"G11")
            (place "Queen2" coord:"E10")
            (place "Rook2" {"C8" "I11"})
            (place "Bishop2" {"F11" "F10" "F9"})
            (place "Knight2" {"D9" "H11"})
        >
        "Glinski placement of non-Pawn pieces"
    )*
    (item "Brusky"
        <
            (place "King1" coord:"N6" state:1)
            (place "Queen1" coord:"L4")
            (place "Rook1" {"I1" "Q9"} state:1)
            (place "Bishop1" {"K3" "M5" "O7"})
            (place "Knight1" {"J2" "P8"})

            (place "King2" coord:"J9" state:1)
            (place "Queen2" coord:"H7")
            (place "Rook2" {"E4" "M12"} state:1)
            (place "Bishop2" {"G6" "I8" "K10"})
            (place "Knight2" {"F5" "L11"})
        >
        "Brusky placement of non-Pawn pieces"
    )
    (item "De Vasa"
        <
            (place "King1" coord:"F1" state:1)
            (place "Queen1" coord:"D1")
            (place "Rook1" {"A1" "I1"} state:1)
            (place "Bishop1" {"C1" "E1" "G1"})
            (place "Knight1" {"B1" "H1"})

            (place "King2" coord:"F9" state:1)
            (place "Queen2" coord:"D9")
            (place "Rook2" {"A9" "I9"} state:1)
            (place "Bishop2" {"C9" "E9" "G9"})
            (place "Knight2" {"B9" "H9"})
        >
        "De Vasa placement of non-Pawn pieces on rows 1 and 9"
    )
    (item "De Vasa with only 8 rows"
        <
            (place "King1" coord:"F1" state:1)
            (place "Queen1" coord:"D1")
            (place "Rook1" {"A1" "I1"} state:1)
            (place "Bishop1" {"C1" "E1" "G1"})
            (place "Knight1" {"B1" "H1"})

            (place "King2" coord:"F8" state:1)
            (place "Queen2" coord:"D8")
            (place "Rook2" {"A8" "I8"} state:1)
            (place "Bishop2" {"C8" "E8" "G8"})
            (place "Knight2" {"B8" "H8"})
        >
        "De Vasa placement of non-Pawn pieces on rows 1 and 8"
    )
    (item "Empty Palace"
        <
              (place "King1" coord:"F1" state:1)
              (place "Queen1" coord:"E2")
              (place "Rook1" {"C1" "I4"} state:1)
              (place "Bishop1" {"F2" "F3" "G3"})
              (place "Knight1" {"D2" "H4"})

              (place "King2" coord:"F11" state:1)
              (place "Queen2" coord:"E9")
              (place "Rook2" {"C8" "I11"} state:1)
              (place "Bishop2" {"F10" "F9" "G10"})
              (place "Knight2" {"D8" "H10"})
        >
        "Empty Palace placement of non-Pawn pieces"
    )
    (item "McCooey"
        <
            (place "King1" coord:"G2")
            (place "Queen1" coord:"E1")
            (place "Rook1" {"D1" "H3"})
            (place "Bishop1" {"F1" "F2" "F3"})
            (place "Knight1" {"E2" "G3"})

            (place "King2" coord:"G11")
            (place "Queen2" coord:"E10")
            (place "Rook2" {"D9" "H11"})
            (place "Bishop2" {"F9" "F10" "F11"})
            (place "Knight2" {"E9" "G10"})
        >
        "McCooey placement of non-Pawn pieces"
    )
    (item "Mini Hexchess"
        <
            (place "King1" coord:"D2")
            (place "Rook1" coord:"E2")
            (place "Bishop1" coord:"D1")
            (place "Knight1" coord:"C1")

            (place "King2" coord:"D6")
            (place "Rook2" coord:"C6")
            (place "Bishop2" coord:"D7")
            (place "Knight2" coord:"E7")
        >
        "Mini Hexchess placement of non-Pawn pieces"
    )
    (item "Shafran"
        <
            (place "King1" coord:"E1" state:1)
            (place "Queen1" coord:"D1")
            (place "Rook1" {"A1" "I5"} state:1)
            (place "Bishop1" {"C1" "F2" "H4"})
            (place "Knight1" {"B1" "G3"})

            (place "King2" coord:"E10" state:1)
            (place "Queen2" coord:"F10")
            (place "Rook2" {"A6" "I10"} state:1)
            (place "Bishop2" {"B7" "D9" "G10"})
            (place "Knight2" {"C8" "H10"})
        >
        "Shafran placement of non-Pawn pieces"
    )
    (item "Starchess"
        // If Starchess had fixed non-Pawn piece locations, the setup might look something like this:
        // <
        //     (place "King1" coord:"F3") (place "Queen1" coord:"D2")
        //     (place "Rook1" coord:"C1") (place "Bishop1" coord:"E3") (place "Knight1" coord:"G3")
        // >
        // <
        //     (place "King2" coord:"D7") (place "Queen2" coord:"F8")
        //     (place "Rook2" coord:"G9") (place "Bishop2" coord:"E7") (place "Knight2" coord:"C7")
        // >
        <>
        "Starchess placement of non-Pawn pieces"
    )
    }
)

(option "Movement of Kings" <Movement-Kings> args:{<Movement>}
    {
    (item "Glinski"
        <(piece "King" Each
            ("KingStep" All ~)
        )>
        "Glinski chess rules for King movement"
    )*
    (item "With history tracking"
        <(piece "King" Each
            (or {
                ("KingStep" All "History_SaveMovementChange")
                (if "Castle_PreCheck"
                    (or {
                        "Castle_KingSide"
                        "Castle_QueenSide"
                        }
                    )
                )
                }
            )
        )>
        "Brusky chess rules for King movement, including castling"
    )
    (item "Empty Palace"
        <(piece "King" Each
            (or {
                ("KingStep" All "History_SaveMovementChange")
                (if "Castle_PreCheck"
                    (or {
                        "Castle_BishopSide"
                        "Castle_QueenSide"
                        }
                    )
                )
                }
            )
        )>
        "Empty Palace chess rules for King movement, including castling"
    )
    (item "Shafran"
        <(piece "King" Each
            (or {
                ("KingStep" All "History_SaveMovementChange")
                (if "Castle_PreCheck"
                    (or {
                        "Castle_BishopSide_Long"
                        "Castle_BishopSide_Short"
                        "Castle_QueenSide_Long"
                        "Castle_QueenSide_Short"
                        }
                    )
                )
                }
            )
        )>
        "Shafran chess rules for King movement, including castling"
    )
    (item "Starchess"
        <(piece "King" Each
            ("KingStep" Orthogonal ~)
        )>
        "Starchess rules for King movement"
    )
    }
)

(option "Movement of Queens" <Movement-Queens> args:{<Movement>}
    {
    (item "Glinski"
        <(piece "Queen" Each ("SlideMove" All ~))>
        "Glinski rules for Queen movement"
    )*
    (item "Starchess"
        <(piece "Queen" Each ("SlideMove" Orthogonal ~))>
        "Glinski rules for Queen movement"
    )
    }
)

(option "Movement of Rooks" <Movement-Rooks> args:{<Movement>}
    {
    (item "Glinski"
        <(piece "Rook" Each ("SlideMove" Orthogonal ~))>
        "Glinski rules for Rook movement"
    )*
    (item "With history tracking"
        <(piece "Rook" Each
            ("SlideMove" Orthogonal "History_SaveMovementChange")
        )>
        "Rules for Rook movement, including castling support"
    )
    (item "Starchess"
        <(piece "Rook" Each ("SlideMove" Vertical ~))>
        "Starchess rules for Rook movement"
    )
    }
)

(option "Movement of Bishops" <Movement-Bishops> args:{<Movement>}
    {
    (item "Glinski"
        <(piece "Bishop" Each ("SlideMove" Diagonal ~))>
        "Glinski rules for Bishop movement"
    )*
    (item "Starchess"
        <(piece "Bishop" Each
            (or
                ("SlideMove" NWandSE ~)
                ("SlideMove" NEandSW ~)
            )
        )>
        "Starchess rules for Rook movement"
    )
    }
)

(option "Movement of Knights" <Movement-Knights> args:{<Movement>}
    {
    (item "Glinski"
        <(piece "Knight" Each
            (leap
                "KnightWalk"
                (to if:"IsToEmptyOrEnemy"
                    "CaptureToPieceAndResetCounter"
                )
            )
        )>
        "Glinski rules for Knight movement"
    )*
    }
)

(option "Movement of Pawns" <Movement-Pawns> args:{<Defines> <Equipment> <Movement>}
    {
    (item "Glinski"
        <
            (define "PawnSimpleCapture"
                ("P12"
                    (or {("PawnStep_To" NW) ("PawnStep_To" NE)})
                    (or {("PawnStep_To" SW) ("PawnStep_To" SE)})
                )
            )
            (define "EnPassant_Ortho"
                ("P12"
                    (or ("EnPassant_Base" NW) ("EnPassant_Base" NE))
                    (or ("EnPassant_Base" SW) ("EnPassant_Base" SE))
                )
            )
        >
        <>
        <
            {
            "StepForwardToEmpty"
            (if (is In (from) (sites Start (what at:(from))))
                "PawnStep_Double"
                "EnPassant_Ortho"
            )
            "PawnSimpleCapture"
            }
        >
        "Glinski rules for Pawn movement"
    )*
    (item "Brusky"
        <
            (define "PawnFork_ToEmpty" ("PawnFork_ToEmpty_Base" NW NE SW SE))
            (define "PawnFork_Double"  ("PawnFork_Double_Base"  NW SE    NE SW    SW NE    SE NW))
            (define "PawnFork"         ("PawnFork_Base"         WNW ENE WSW ESE))
            (define "EnPassantFork"    ("EnPassantFork_Base"    WNW ENE WSW ESE))

            // If an Enemy piece blocks all movement from either forward direction (so steps=1),
            //     then that Pawn cannot move in the other forward diretion.
            // But an Enemy piece two Cells away does not block movement in the other direction.
            (define "IsPawnUnblocked_Base"
                (and
                    {
                    (is In (ahead (from) steps:1 #1) (sites Empty))
                    (is In (ahead (from) steps:1 #2) (sites Empty))
                    }
                )
            )
            (define "IsPawnUnblocked"
                ("P12" ("IsPawnUnblocked_Base" NW NE) ("IsPawnUnblocked_Base" SW SE))
            )

        >
        <>
        <
            {
            (if (is In (from) (sites Start (what at:(from))))
                (or {
                    ("PawnStep_To" Forward)  // Can capture Forward only from Start Cell
                    (if "IsPawnUnblocked"
                        (or {
                            "PawnFork_ToEmpty"
                            "PawnFork_Double"
                            }
                        )
                    )
                    }
                )
                (or {
                    "PawnFork_ToEmpty"
                    "PawnFork"
                    "EnPassantFork"
                    }
                )
            )
            "PawnFork"
            }
        >
        "Brusky rules for Pawn movement"
    )
    (item "De Vasa"
        <
            (define "PawnFork_ToEmpty" ("PawnFork_ToEmpty_Base" N NE S SW))
            (define "PawnFork_Double"  ("PawnFork_Double_Base"  N S    NE SW    S N    SW NE))
            (define "PawnFork"         ("PawnFork_Base"         NNW E SSE W))
            (define "EnPassantFork"    ("EnPassantFork_Base"    NNW E SSE W))
        >
        <>
        <
            {
            "PawnFork_ToEmpty"
            (if (is In (from) (sites Start (what at:(from))))
                "PawnFork_Double"
                "EnPassantFork"
            )
            "PawnFork"
            }
        >
        "De Vasa rules for Pawn movement"
    )
    (item "McCooey"
        <>
        <
            (regions "CenterPawnStartCell" P1 (sites {"F4"}))
            (regions "CenterPawnStartCell" P2 (sites {"F8"}))
        >
        <   {
            "StepForwardToEmpty"
            (if (and
                    (is In (from) (sites Start (what at:(from))))
                    (not (is In (from) (sites Mover "CenterPawnStartCell")))
                )
                "PawnStep_Double"
            )
            "PawnStep_ForwardDiag"
            "EnPassant_Diag"
            }
        >
        "McCooey rules for Pawn movement"
    )
    (item "Mini Hexchess"
        <>
        <>
        <   {
            "StepForwardToEmpty"
            "PawnStep_ForwardDiag"
            }
        >
        "Mini Hexchess rules for Pawn movement"
    )

    (item "Shafran"
        <
            // Shafran Chess includes an initial Pawn moves with 3 steps.
            // This allows an e.p. capture to any of the skipped spaces.
            (define "PawnStep_Multi"
                (slide
                    Forward
                    (between
                        (min 3)
                        if:(is In (between) (sites Empty))
                    )
                    (to if:"IsToEmpty")
                    (then
                        (and  // BUG: There is no en passant after PawnStep_Multi.
                            {
                            (set Pending (between))
                            (set Var (last To))
                            }
                        )
                    )
                )
            )
        >
        <
            (regions "Pawn_Step2Cells" P1 (sites {"B2" "C2" "D2" "E2" "F3" "G4" "H5"}))
            (regions "Pawn_Step3Cells" P1 (sites           {"D2" "E2" "F3"}))

            (regions "Pawn_Step2Cells" P2 (sites {"B6" "C7" "D8" "E9" "F9" "G9" "H9"}))
            (regions "Pawn_Step3Cells" P2 (sites           {"D8" "E9" "F9"}))
        >
        <   {
            "StepForwardToEmpty"
            (if (is In (from) (sites Start (what at:(from))))
                (or {
                    (if (is In (from) (sites Mover "Pawn_Step2Cells"))
                        "PawnStep_Double"
                    )
                    (if (is In (from) (sites Mover "Pawn_Step3Cells"))
                        "PawnStep_Multi"
                    )
                    }
                )
            )
            "PawnStep_ForwardDiag"
            "EnPassant_Diag"
            }
        >
        "Shafran rules for Pawn movement"
    )
    }
)

//------------------------------------------------------------------------------

(rulesets {
    (ruleset "Ruleset/Glinski"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-6N"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/None"
        "Placement by Players/None"
        "Promotion/Glinski"

        "Placement of Pawns/Glinski"
        "Placement of Non-Pawns/Glinski"

        "Movement of Kings/Glinski"
        "Movement of Queens/Glinski"
        "Movement of Rooks/Glinski"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Glinski"
        }
    )*
    (ruleset "Ruleset/Glinski with 3 Pawns shifted one space"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-6N"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/None"
        "Placement by Players/None"
        "Promotion/Glinski"

        "Placement of Pawns/Glinski with 3 Pawns shifted one space"
        "Placement of Non-Pawns/Glinski"

        "Movement of Kings/Glinski"
        "Movement of Queens/Glinski"
        "Movement of Rooks/Glinski"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Glinski"
        }
    )
    (ruleset "Ruleset/Glinski with 5 Pawns shifted one space"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-6N"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/None"
        "Placement by Players/None"
        "Promotion/Glinski"

        "Placement of Pawns/Glinski with 5 Pawns shifted one space"
        "Placement of Non-Pawns/Glinski"

        "Movement of Kings/Glinski"
        "Movement of Queens/Glinski"
        "Movement of Rooks/Glinski"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Glinski"
        }
    )
    (ruleset "Ruleset/Brusky"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-9"
        "Board Details/Brusky"
        "Graphics/Board Colours"

        "Castling/Brusky"
        "Placement by Players/None"
        "Promotion/Brusky"

        "Placement of Pawns/Brusky"
        "Placement of Non-Pawns/Brusky"

        "Movement of Kings/With history tracking"
        "Movement of Queens/Glinski"
        "Movement of Rooks/With history tracking"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Brusky"
        }
    )
    (ruleset "Ruleset/De Vasa"
        {
        "Players/Players-2-NNE-SSW"
        "Board/Rhombus-9"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/De Vasa"
        "Placement by Players/None"
        "Promotion/De Vasa"

        "Placement of Pawns/De Vasa"
        "Placement of Non-Pawns/De Vasa"

        "Movement of Kings/With history tracking"
        "Movement of Queens/Glinski"
        "Movement of Rooks/With history tracking"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/De Vasa"
        }
    )
    (ruleset "Ruleset/De Vasa with only 8 rows"
        {
        "Players/Players-2-NNE-SSW"
        "Board/Rhombus-9"
        "Board Details/De Vasa with only 8 rows"
        "Graphics/Region Colours"

        "Castling/De Vasa with only 8 rows"
        "Placement by Players/None"
        "Promotion/De Vasa"

        "Placement of Pawns/De Vasa with only 8 rows"
        "Placement of Non-Pawns/De Vasa with only 8 rows"

        "Movement of Kings/With history tracking"
        "Movement of Queens/Glinski"
        "Movement of Rooks/With history tracking"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/De Vasa"
        }
    )
    // Created to test Castling, and left in
    (ruleset "Ruleset/Empty Palace"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-6N"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/Empty Palace"
        "Placement by Players/None"
        "Promotion/Glinski"

        "Placement of Pawns/Glinski with 3 Pawns shifted one space"
        "Placement of Non-Pawns/Empty Palace"

        "Movement of Kings/Empty Palace"
        "Movement of Queens/Glinski"
        "Movement of Rooks/With history tracking"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Glinski"
    })
    (ruleset "Ruleset/McCooey"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-6N"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/None"
        "Placement by Players/None"
        "Promotion/Glinski"

        "Placement of Pawns/McCooey"
        "Placement of Non-Pawns/McCooey"

        "Movement of Kings/Glinski"
        "Movement of Queens/Glinski"
        "Movement of Rooks/Glinski"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/McCooey"
        }
    )
    (ruleset "Ruleset/Mini Hexchess"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-4N"
        "Board Details/None"
        "Graphics/Region Colours"

        "Castling/None"
        "Placement by Players/None"
        "Promotion/Mini Hexchess"

        "Placement of Pawns/Mini Hexchess"
        "Placement of Non-Pawns/Mini Hexchess"

        "Movement of Kings/Glinski"
        "Movement of Queens/Glinski"
        "Movement of Rooks/Glinski"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Mini Hexchess"
        }
    )
    (ruleset "Ruleset/Shafran"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-6N"
        "Board Details/Shafran"
        "Graphics/Region Colours"

        "Castling/Shafran"
        "Placement by Players/None"
        "Promotion/Glinski"

        "Placement of Pawns/Shafran"
        "Placement of Non-Pawns/Shafran"

        "Movement of Kings/Shafran"
        "Movement of Queens/Glinski"
        "Movement of Rooks/With history tracking"
        "Movement of Bishops/Glinski"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Shafran"
        }
    )
    (ruleset "Ruleset/Starchess"
        {
        "Players/Players-2-N-S"
        "Board/Hexagon-5N"
        "Board Details/Starchess"
        "Graphics/Region Colours"

        "Castling/None"
        "Placement by Players/Starchess"
        "Promotion/Starchess"

        "Placement of Pawns/Starchess"
        "Placement of Non-Pawns/Starchess"

        "Movement of Kings/Starchess"
        "Movement of Queens/Starchess"
        "Movement of Rooks/Starchess"
        "Movement of Bishops/Starchess"
        "Movement of Knights/Glinski"
        "Movement of Pawns/Glinski"
        }
    )
    }
)

//------------------------------------------------------------------------------

(metadata

(info
{
(version "0.9.3")

(description "Chess variants played on boards consisting of hexagons.

Note that, in most forms of Hexagonal Chess, the board is coloured with a three-colour uniform tiling---see https://en.wikipedia.org/wiki/Hexagonal_tiling. With such a colouring, a King on a given space near the center of the board can move to any of the 6 adjacent or 'orthogonally connected' spaces, which will have a different colour than the original space. In some variants of Hexagonal Chess, the King can also move to the six closest spaces of the same colour, which are sometimes called 'diagonally connected'. If the board has a center space, that space is often coloured gray, or with the colour of medium brightness.
")

(aliases
    {
    "Hexagonal Chess"
    "Gli≈Ñski's Chess"
    "Glinski's Chess"
    "Glinski Chess"

    "Brusky's Chess"
    "Brusky Chess"
    "De Vasa's Chess"
    "De Vasa Chess"
    "McCooey's Chess"
    "McCooey Chess"
    "Mini Hexchess"
    "Shafran's Chess"
    "Shafran Chess"
    "Starchess"
    }
)
(origin  "The most popular hexagonal chess variant is Gli≈Ñski's Chess, invented in 1936 by W≈Çadys≈Çaw Gli≈Ñski, though some other variants had been invented decades earlier.")
(classification "board/war/chess")
(credit "Jay Coskey, with some small functions drawn from Chess.lud, by Eric Piette")

(rules "'Hexagonal Chess' can refer to any chess variant played on a board consisting of hexagonal spaces. Some people also use the term to refer to chess played on hexagonal boards whose spaces might not be hexagonal.")

// Rules: Redirect
(useFor "Ruleset/Glinski with 3 Pawns shifted one space" (rules "See the Glinski variant for the rules for this variant."))
(useFor "Ruleset/Glinski with 5 Pawns shifted one space" (rules "See the Glinski variant for the rules for this variant."))

(useFor "Ruleset/De Vasa with only 8 rows" (rules "See the De Vasa variant for the rules for this variant."))

// Rules: Origins
(useFor "Ruleset/Glinski" (rules "Glinski Chess was invented by W≈Çadys≈Çaw Gli≈Ñski in 1936, and first launched in 1949."))
(useFor "Ruleset/Brusky" (rules "Brusky Chess was invented by Yakov Brusky 1966."))
(useFor "Ruleset/De Vasa" (rules "De Vasa Chess was invented by Helge E. de Vasa in 1953-1954."))
(useFor "Ruleset/Empty Palace" (rules "Empty Palace Chess was invented by Jay Coskey in 2020."))
(useFor "Ruleset/McCooey" (rules "McCooey Chess was invented by Dave McCooey and Richard Honeycutt in 1978-1979."))
(useFor "Ruleset/Mini Hexchess" (rules "Mini Hexchess was invented by Dave McCooey and Richard Honeycutt in 1997."))
(useFor "Ruleset/Shafran" (rules "Shafran Chess was invented by Isaak Grigorevich Shafran in 1939, and registered in 1956."))
(useFor "Ruleset/Starchess" (rules "Starchess was invented by L√°szl√≥ Polg√°r."))

// Rules: Board
(useFor "Ruleset/Glinski" (rules "Glinski Chess is played on a hexagonal board with each side having length 6, and each space oriented horizontally. It has 91 spaces."))
(useFor "Ruleset/Brusky" (rules "Brusky Chess is played on a hexagonal board with sides of length 4, 5, and 9, and each space oriented vertically. It has 84 spaces."))
(useFor "Ruleset/De Vasa" (rules "De Vasa Chess is played on a 9x9 rhombus-shaped board. It has 81 spaces."))
(useFor "Ruleset/Empty Palace" (rules "Empty Palace Chess is played on a hexagonal board with each side having length 6, and each space oriented horizontally. It has 91 spaces."))
(useFor "Ruleset/McCooey" (rules "McCooey Chess is played on a hexagonal board with each side having length 6, and each space oriented horizontally. It has 91 spaces."))
(useFor "Ruleset/Mini Hexchess" (rules "Mini Hexchess is played on a hexagonal board with each side having length 5, and each space oriented horizontally. It has 37 spaces."))
(useFor "Ruleset/Shafran" (rules "Shafran Chess is played on a 'narrow' hexagonal board that can be thought of as a hexagonal board of size 6 with some outer spaces removed. It has 70 spaces."))
(useFor "Ruleset/Starchess" (rules "Starchess is played on a star-shaped hexagonal board that can be thought of as a hexagonal board with each side having length 6, but with four spaces removed from each corner. It has 37 spaces."))

// Rules: Piece Movement
(useFor "Ruleset/Glinski" (rules "
* Kings can move one space in any of the 12 directions from the current space. There is no castling in Glinski Chess.
* Rooks can slide in any of the six 'adjacent' directions from their current space---North, South, or 60 degrees off either of those.
* Bishops can slide along the six directions: West, East, or 30 degrees off due North or or 30 degrees off due South. Note that, given the 3-colour colouring of the board, each Bishop remains on the same colour that it started the game on.
* Queens can make any move that would be available to a rook or a bishop on the current space.
* Knights can leap to any space that is two spaces away along an adjacent direction (North, South, or 60 degrees off either of those), plus one more space 60 degrees off of that direction. Note that a Knight always moves to a space of a different colour than the space it moved from.
* Pawns can advance one space forward without capturing. They capture by moving to one of the two adjacent spaces 60 degrees left or right of forward. A Pawn on a Pawn start space can advance two spaces forward without capturing, even if it has previously moved (by capturing) to a different Pawn start space than it started the game on. Pawns are promoted upon reaching the farthest rank in a given file.
"))

(useFor "Ruleset/Brusky" (rules "
* Queens, Rooks, Bishops, and Knights move as in Glinski Chess.
* Kings castle either kingside (moving two spaces) or queenside (moving three spaces).
* Pawns, when moving from a Pawn start space, can advance without capturing to either of the two adjacent spaces slightly left or right of forward, unless they are 'blocked'. A Pawn on a Pawn start space is 'blocked' if an enemy piece is adjacent to it in either of the forward adjacent directions. Pawns capture along a forward diagonal (i.e., to a space one row forward and off to the side, to a space connected by an edge, and having the same colour). A Pawn on a Pawn start space can also capture forwards (i.e., to the space directly ahead, having the same colour). Pawns and promoted upon reaching the farthest row.
"))

(useFor "Ruleset/De Vasa" (rules "
* All pieces other than Kings and Pawns move as in Glinski Chess.
* Kings can castle either kingside (moving two spaces) or queenside (moving three spaces).
* Pawns advance without capturing to the adjacent space slightly left or right of forward. On their first move, they can move two spaces in either of these directions without capturing. They capture 'diagonally forward' (i.e., to a space ahead connected by an edge, and having the same colour). Pawns are promoted upon reaching the farthest row.
"))

(useFor "Ruleset/Empty Palace" (rules "
* All pieces other than Kings move as in Glinski Chess.
* Kings can castle to the left or right, moving two spaces in either case. The Rook moves two spaces in the opposite direction.
"))

(useFor "Ruleset/McCooey" (rules "
* All pieces other than Pawns move as in Glinski Chess.
* Pawns can advance one space forward without capturing. A Pawn on a Pawn start space but not in the middle column can advance two spaces forward without capturing. Pawns capture 'diagonally forward' (i.e., to a space ahead connected by an edge, and having the same colour). Pawns are promoted upon reaching the farthest rank in a given file.
"))

(useFor "Ruleset/Mini Hexchess" (rules "
* Kings, Rooks, Bishops, and Knights move as in Glinski Chess.
* There are no Queens in Mini Hexchess.
* Pawns can advance one space forward without capturing. Pawns can never advance more than one space. Pawns capture 'diagonally forward' (i.e., to a space ahead connected by an edge, and having the same colour). Pawns are promoted when they reach the farthest rank in a given file. Pawns are promoted upon reaching the farthest rank in a given file. Since there are no Queens in Mini Hexchess, Pawns can be promoted only to a Rook, Bishop, or Knight.
"))

(useFor "Ruleset/Shafran" (rules "
* Queens, Rooks, Bishops, and Knights move as in Glinski Chess.
* Kings move as in Glinski Chess, but can also castle. In 'Long Castling', the King moves three spaces toward its queenside Rook and the Rook moves two spaces in the opposite direction. In 'Short Castling', the King moves two spaces toward its bishopside Rook, and the Rook moves three spaces.
* Pawns can advance one space forward without capturing. A Pawn on a Pawn start space can advance any number of spaces, up to the middle row of the board. Thus the outermost Pawns on their first moves can only advance one space, while the Pawns in the three center columns can advance up to three spaces. Pawns capture 'diagonally forward' (i.e., to a space ahead connected by an edge, and having the same colour). Pawns are promoted upon reaching the farthest rank in a given file.
"))

(useFor "Ruleset/Starchess" (rules "
* Starchess starts off with the non-Pawn pieces being placed behind the Pawns. This happens one piece at a time, in alternating turns, until all non-Pawn pieces have been placed. Then the movement phase of the game begins as usual.
* Knights move as in Glinsky Chess.
* Queens can slide in any of the six adjacent directions from their current space---forward, backward, or 60 degrees off either of those.
* Kings can move one space in any of those same six directions.
* Rooks can slide forward or backward only in their given column.
* Bishops can slide in only four of the adjacent directions: Northwest, Northeast, Southwest, or Southeast.
* Pawns can advance one space forward without capturing. A Pawn on a Pawn start space can advance two spaces forward, even if it has previously moved (by capturing) to a different Pawn start space than it started the game on. Pawns capture by moving to one of the two adjacent spaces 60 degrees left or right of forward. Pawns are promoted upon reaching the farthest rank in a given file. Some terminology: a Pawn off to the side, in one of the two spaces at the extremes of the middle row is called a 'mummy', while a Pawn in one of the spaces adjacent to that is called a 'dead Pawn'. Mummies and dead Pawns are blocked from being promoted until they can return to one of the five central columns.
"))

// Rules: Game ending
(rules "The game ends on a checkmate or stalemate."
)

(useFor "Ruleset/Glinski" (rules "In Glinski's Chess, the player that caused the stalemate is awarded 3/4 of a point, while the other player is awarded 1/4 of a point."
))

// Rules: Variations
(useFor "Ruleset/Glinski" (rules "Variations: Move the center 3 or 5 Pawns toward the edge of the board by one space, as proposed in A Player's Guide to Table Games, by John Jackson, Stackpole Books, 1975.
"))

(source "For an overview, see https://en.wikipedia.org/wiki/Hexagonal_chess. For details, see The Classified Encyclopedia of Chess Variants, by D. B. Pritchard (2nd edition, completed and edited by John Beasley, 2007)."
)
}
)

    (graphics {
        (showCheck)
        (pieceScale "Pawn" 0.825)
        (boardStyle ChessStyle)

        <Graphics:Colouring>
    })

    (ai "Chess_ai")
    // (ai "Hexagonal Chess_ai")  // Possible values: Q:12, R:7.5, B:4.5, N:4.5, P:1
)
